{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FakeService {\n  constructor(http) {\n    this.http = http;\n  }\n  getData1() {\n    const url = \"https://jsonplaceholder.typicode.com/todos/1\";\n    return this.http.get(url);\n  }\n  getData2() {\n    const url = \"https://jsonplaceholder.typicode.com/todos/1\";\n    return this.http.get(url).pipe(tap(data => {\n      console.log(\"Data Fetched\" + data);\n    }), catchError(this.handleError('Failed to fetch Data')));\n  }\n  handleError(operation = \"operation\") {\n    return error => {\n      console.error(error);\n      const message = `server returned code ${error.status} with body \"${error.error}\"`;\n      throw new Error(`${operation} failed: ${message}`);\n    };\n  }\n  postData1(data) {\n    const url = \"https://jsonplaceholder.typicode.com/todos/1\";\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(data, url, httpOptions);\n  }\n  static {\n    this.ɵfac = function FakeService_Factory(t) {\n      return new (t || FakeService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FakeService,\n      factory: FakeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","catchError","tap","FakeService","constructor","http","getData1","url","get","getData2","pipe","data","console","log","handleError","operation","error","message","status","Error","postData1","httpOptions","headers","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Angular Projects\\JestTesting\\JestAngular\\src\\app\\services\\fake.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FakeService {\n\n  constructor(private readonly http:HttpClient) { }\n\n\n  getData1() : Observable<any> {\n    const url = \"https://jsonplaceholder.typicode.com/todos/1\";\n    return this.http.get(url);\n  }\n\n  getData2() : Observable<any> {\n    const url = \"https://jsonplaceholder.typicode.com/todos/1\";\n\n    return this.http.get(url).pipe(\n      tap((data:any)=>{\n        console.log(\"Data Fetched\"+data);\n      }),\n      catchError(this.handleError('Failed to fetch Data'))\n    );\n  }\n\n  private handleError<T>(operation = \"operation\"){\n      return (error: HttpErrorResponse): Observable<T> => {\n        console.error(error);\n        const message = `server returned code ${error.status} with body \"${error.error}\"`;\n        throw new Error(`${operation} failed: ${message}`);\n      }\n  }\n\n  postData1(data:any) : Observable<any> {\n    const url = \"https://jsonplaceholder.typicode.com/todos/1\";\n    const httpOptions = {\n        headers : new HttpHeaders({'Content-Type': 'application/json'})\n    }\n    return this.http.post(data,url, httpOptions);\n  }\n}\n"],"mappings":"AAAA,SAAwCA,WAAW,QAAQ,sBAAsB;AAEjF,SAASC,UAAU,EAAcC,GAAG,QAAQ,MAAM;;;AAKlD,OAAM,MAAOC,WAAW;EAEtBC,YAA6BC,IAAe;IAAf,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAGhDC,QAAQA,CAAA;IACN,MAAMC,GAAG,GAAG,8CAA8C;IAC1D,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAACD,GAAG,CAAC;EAC3B;EAEAE,QAAQA,CAAA;IACN,MAAMF,GAAG,GAAG,8CAA8C;IAE1D,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,CAC5BR,GAAG,CAAES,IAAQ,IAAG;MACdC,OAAO,CAACC,GAAG,CAAC,cAAc,GAACF,IAAI,CAAC;IAClC,CAAC,CAAC,EACFV,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,sBAAsB,CAAC,CAAC,CACrD;EACH;EAEQA,WAAWA,CAAIC,SAAS,GAAG,WAAW;IAC1C,OAAQC,KAAwB,IAAmB;MACjDJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;MACpB,MAAMC,OAAO,GAAG,wBAAwBD,KAAK,CAACE,MAAM,eAAeF,KAAK,CAACA,KAAK,GAAG;MACjF,MAAM,IAAIG,KAAK,CAAC,GAAGJ,SAAS,YAAYE,OAAO,EAAE,CAAC;IACpD,CAAC;EACL;EAEAG,SAASA,CAACT,IAAQ;IAChB,MAAMJ,GAAG,GAAG,8CAA8C;IAC1D,MAAMc,WAAW,GAAG;MAChBC,OAAO,EAAG,IAAItB,WAAW,CAAC;QAAC,cAAc,EAAE;MAAkB,CAAC;KACjE;IACD,OAAO,IAAI,CAACK,IAAI,CAACkB,IAAI,CAACZ,IAAI,EAACJ,GAAG,EAAEc,WAAW,CAAC;EAC9C;;;uBAnCWlB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXxB,WAAW;MAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}